{"version":3,"sources":["component/Map.js","App.js","serviceWorker.js","index.js"],"names":["geolocateStyle","float","margin","padding","Map","useState","width","height","latitude","longitude","zoom","viewport","setViewPort","style","textAlign","fontSize","fontWeight","href","mapboxApiAccessToken","mapStyle","onViewportChange","transitionDuration","positionOptions","enableHighAccuracy","trackUserLocation","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAOMA,G,MAAiB,CACnBC,MAAO,OACPC,OAAQ,OACRC,QAAS,SAkCEC,EA/BH,WAAO,IAAD,EAEmBC,mBAAS,CACtCC,MAAO,OACPC,OAAQ,IACRC,SAAU,EACVC,UAAW,EACXC,KAAM,IAPI,mBAEPC,EAFO,KAEGC,EAFH,KAYd,OACI,yBAAKC,MAAO,CAAEX,OAAQ,WAClB,wBAAIW,MAAO,CAACC,UAAW,SAAUC,SAAU,OAAQC,WAAY,WAA/D,oDAA4H,uBAAGC,KAAK,WAAR,QAA5H,6BACA,kBAAC,IAAD,iBACQN,EADR,CAEIO,qBAzBJ,2FA0BIC,SAAS,iCACTC,iBATc,SAAAT,GAAQ,OAAIC,EAAY,eAAID,EAAL,CAAeU,mBAAoB,UAWxE,kBAAC,IAAD,CACIR,MAAOb,EACPsB,gBAAiB,CAACC,oBAAoB,GACtCC,mBAAmB,O,gBCnBxBC,MAXf,WACI,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWxB,QCApCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f1c5945.chunk.js","sourcesContent":["import React,{ useState } from 'react'\nimport MapGL, {GeolocateControl } from 'react-map-gl'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst TOKEN='pk.eyJ1IjoiY292aXZpIiwiYSI6ImNrN3ozbzkzNTAwcWozZWxsNmZ4Zm01b2sifQ.Q1j83pq8CZGqDr8jiXSPLw'\n\nconst geolocateStyle = {\n    float: 'left',\n    margin: '50px',\n    padding: '10px'\n};\n\nconst Map = () => {\n\n    const [viewport, setViewPort ] = useState({\n        width: \"100%\",\n        height: 900,\n        latitude: 0,\n        longitude: 0,\n        zoom: 2\n    })\n\n    const _onViewportChange = viewport => setViewPort({...viewport, transitionDuration: 3000 })\n\n    return (\n        <div style={{ margin: '0 auto'}}>\n            <h1 style={{textAlign: 'center', fontSize: '25px', fontWeight: 'bolder' }}>GeoLocator: Click To Find Your Location or click <a href=\"/search\">here</a> to search for a location</h1>\n            <MapGL\n                {...viewport}\n                mapboxApiAccessToken={TOKEN}\n                mapStyle=\"mapbox://styles/mapbox/dark-v8\"\n                onViewportChange={_onViewportChange}\n            >\n                <GeolocateControl\n                    style={geolocateStyle}\n                    positionOptions={{enableHighAccuracy: true}}\n                    trackUserLocation={true}\n                />\n            </MapGL>\n        </div>\n    )\n}\n\nexport default Map","import React from 'react'\nimport './App.css'\n\nimport Map from  './component/Map'\n//import SearchableMap from './components/SearchableMap';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom'\n\nfunction App() {\n    return (\n        <div>\n            <BrowserRouter >\n                <Switch>\n                    <Route exact path=\"/map\" component={Map} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}